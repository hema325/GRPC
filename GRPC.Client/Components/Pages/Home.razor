@page "/"
@rendermode InteractiveServer

@using GRPC.Client.Services
@using GRPC.Protos
@using Grpc.Core
@using System.Text
@using static Grpc.Core.Metadata
@using static GRPC.Protos.TrackingService

@inject TrackingServiceClient TrackingService
@inject CustomeTrackingServiceClient Test

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<button class="btn btn-primary d-block" @onclick="Track">Track</button>
<button class="btn btn-primary d-block" @onclick="StreamRequest">Stream Request</button>
<button class="btn btn-primary d-block" @onclick="StreamResponse">Stream Response</button>
<button class="btn btn-primary d-block" @onclick="Stream">Stream</button>

@if (Response != null)
{
    <h4>@Response.Success</h4>
    <h4>@Response.TimeStamp</h4>
}

@if(Exception != null)
{
    <h4>@Exception.Message</h4>
    <h4>@Exception.Status.StatusCode</h4>
    <h4>@Exception.Status.Detail</h4>
    <h4>@Exception.StackTrace?.ToString()</h4>
}

@code {
    private TrackingResponse Response = null;
    private RpcException Exception = null;

    private async Task Track()
    {
        Response = null;
        Exception = null;

        try
        {
            var message = new TrackingMessage
                {
                    Speed = 22,
                };

            // message.Locations.Add(new Location { Lat = 222, Long = 3333 });

            var credentials = "ibrahim:Pa$$w0rd";
            var token = Convert.ToBase64String(Encoding.UTF8.GetBytes(credentials));
            var metaData = new Metadata()
            {
                {"Authorization", $"Basic {token}"},
                //new Entry("Authorization", $"Basic {token}")
            };
            //metaData.Add("Authorization", $"Basic {token}");

            Response = await TrackingService.TrackAsync(message, metaData);
        }
        catch(RpcException ex)
        {
            Exception = ex;
        }
    }

    private async Task StreamRequest()
    {
        Response = null;
        Exception = null;

        var message = new TrackingMessage
            {
                Speed = 22,
            };

        message.Locations.Add(new Location { Lat = 222, Long=3333});

        using var request = TrackingService.StreamRequest();

        await request.RequestStream.WriteAsync(message);
        await request.RequestStream.WriteAsync(message);

        await request.RequestStream.CompleteAsync();

        Response = await request.ResponseAsync;
    }    

    private async Task StreamResponse()
    {
        Response = null;
        Exception = null;

        var message = new TrackingMessage
            {
                Speed = 22,
            };

        message.Locations.Add(new Location { Lat = 222, Long=3333});

        using var response = TrackingService.StreamResponse(message);

        while (await response.ResponseStream.MoveNext(default))
        {
            Response = response.ResponseStream.Current;
        }
    }   

    private async Task Stream()
    {
        Response = null;
        Exception = null;

        var message = new TrackingMessage
            {
                Speed = 22,
            };

        message.Locations.Add(new Location { Lat = 222, Long=3333});

        using var stream = TrackingService.Stream();

        await stream.RequestStream.WriteAsync(message);
        await stream.RequestStream.WriteAsync(message);

        await stream.RequestStream.CompleteAsync();

        while(await stream.ResponseStream.MoveNext(default))
        {
            Response = stream.ResponseStream.Current;
        }
    }
}